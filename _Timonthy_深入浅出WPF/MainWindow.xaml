<Window x:Class="_Timonthy_深入浅出WPF.MainWindow" x:ClassModifier="internal"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:_Timonthy_深入浅出WPF"
        xmlns:sys ="clr-namespace:System;assembly=mscorlib"
        xmlns:controls ="clr-namespace:ControlLibrary;assembly=ControlLibrary"
        mc:Ignorable="d"
        Title="MainWindow" Height="800" Width="800">
    <Window.Resources>
        <local:Human x:Key="human" Name ="Tim" Child="LittleTim"></local:Human>
        <!--类型“System.String”的对象无法转换为类型“_Timonthy_深入浅出WPF.Human”。-->
        <sys:String x:Key="stringHello">Hello WPF!</sys:String>
    </Window.Resources>

    <!-- xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"引用的是和xaml编译解析相关的类库
         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"引用的是一些跟UI有关的类库，不止一个是一系列。
         只有一个命名空间可以不加字母（或者说是命名）。这是一个默认命名空间。
         x:Class="_Timonthy_深入浅出WPF.MainWindow"这个是将Xaml编译成的一个类——_Timonthy_深入浅出WPF命名空间下的MainWindow
    -->
    <TabControl>
        <TabItem Header="Lesson1~3">
            <StackPanel>
                <!--声明性语言 只需要声明一个标签就代表一个对象。例如Grid,Window-->
                <Path Data="M 0,0 L 100,200 L 200,100 Z" Stroke="Black" Fill="Tomato"/>
                <!--Stroke笔画
                    M 0,0 L 100,200 L 200,100 Z
                    M表示 移动指令 移动到（0,0）。使用大写M时，表示绝对值; 使用小写m时; 表示相对于前一点的值，如果前一点没有指定，则使用(0,0)。
                    L表示 直线 也就是从（0,0）到（100,200）的直线
                    Z表示关闭
                 -->

                <!--<local:Human></local:Human> 不能写在这里可能因为不是UI元素,可以定义，但是不能加入UIelementCollection的集合中-->

                <!--<Button Content="<Rectangle Width="20" Height="20" Stroke="DarkGreen" Fill="LawnGreen"/>" Click="Button_Click"/>其实这种方式应该也不是不可以，只是没办法去实现解析-->
                <Button Click="Button_Click">
                    <!--Content-->
                    <Button.Content>
                        <Rectangle Width="20" Height="20" Stroke="DarkGreen" Fill="LawnGreen"/>
                    </Button.Content>
                </Button>
                <Rectangle Width="20" Height="20">
                    <Rectangle.Fill>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                            <!--#region 注释的部分 -->
                            <!--<LinearGradientBrush.StartPoint>
                                    <Point X="0" Y="0"/>
                                </LinearGradientBrush.StartPoint>
                                <LinearGradientBrush.EndPoint>
                                    <Point X="1" Y="1"/>
                                </LinearGradientBrush.EndPoint>-->
                            <!--#endregion-->
                            <LinearGradientBrush.GradientStops>
                                <!--<GradientStopCollection> 如果是集合中的元素，集合可以舍弃-->
                                <GradientStop Offset="0.4" Color="Blue"></GradientStop>
                                <!--Color 获取或设置渐变停止点的颜色。-->
                                <!--Offset 获取渐变停止点在渐变向量中的位置。值 0.0 指定停止位置在渐变向量开头，而值 1.0 指定该停止位于渐变向量末尾。(一般设置可见区域 0-1)-->
                                <GradientStop Offset="0.5" Color="Cyan"></GradientStop>
                                <GradientStop Offset="1.0" Color="Yellow"></GradientStop>
                                <!--</GradientStopCollection>-->
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Rectangle.Fill>
                    <Rectangle.Stroke>
                        <SolidColorBrush Color="Black"/>
                    </Rectangle.Stroke>

                </Rectangle>

                <!--#region 标签扩展 -->
                <Grid>
                    <TextBlock Height="24" Width="120" Background="LightBlue" Text="{StaticResource stringHello}"/>
                    <!--构造函数中出现的属性名，可以省略不写，但是要按顺序给值。比如上面的ResourceKey已省略。为了代码的可读性，建议保留。为了代码的简洁性，可以省略。自己取舍-->
                </Grid>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="24"></RowDefinition>
                        <RowDefinition Height="24"></RowDefinition>
                        <RowDefinition Height="24"></RowDefinition>
                    </Grid.RowDefinitions>
                    <TextBox x:Name="tb" Text="{Binding ElementName=sld, Path=Value}"/>
                    <Slider x:Name="sld" Grid.Row="2" Value="50" Maximum="100" Minimum="0"/>
                </Grid>
                <!--#endregion-->

                <Button x:Name="button1" Content="Click Me!" Width="60" Height="20" Click="button1_Click"></Button>
                <!--#region 用户控件的使用 -->
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition MinHeight="15"></RowDefinition>
                        <RowDefinition MinHeight="15"></RowDefinition>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <controls:SalaryCaculator Grid.Row="0" Grid.Column="0"></controls:SalaryCaculator>
                    <controls:SalaryCaculator Grid.Row="0" Grid.Column="1"></controls:SalaryCaculator>
                    <controls:SalaryCaculator Grid.Row="1" Grid.Column="0"></controls:SalaryCaculator>
                    <controls:SalaryCaculator Grid.Row="1" Grid.Column="1"></controls:SalaryCaculator>
                </Grid>
                <!--#endregion-->

            </StackPanel>
        </TabItem>
        <TabItem Header="Lesson4">
            <!--Content只能设置一次-->
            <!--xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"里面包含的类都是用来解析和分析XAML-->
            <!--x:Class是xaml所声明的类最后要和哪一个类合并-->
            <!--x:ClassModifier=""标识的是类的访问级别，并且要和后台C#代码的访问性保持一致-->
            <!--x:FieldModifier=""-->
            <!--x:Name的演示写在了myControlxaml里面，如果没有名字该怎么获取对象-->
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition MaxHeight="24"/>
                </Grid.RowDefinitions>
                <controls:myControlxaml></controls:myControlxaml>
                <!---myControlxaml不可访问-->
                <Button Grid.Row="1" Content="Show Happy" Width="80" Height="24" Click="Button_Click_1"></Button>
            </Grid>
        </TabItem>
        <TabItem Header="Lesson5">

        </TabItem>
    </TabControl>

</Window>
